<!DOCTYPE html>
<html lang="en">
<head>
  <%- include("../../partials/header"); %>
  <style>
    /* Cart icon styles */
    .cart-icon {
      position: fixed;
      bottom: 20px; /* Positioning from the bottom */
      right: 20px; /* Positioning from the right */
      z-index: 1000; /* Ensure it stays on top of other elements */
      font-size: 2rem; /* Font size for the icon */
      background: #fff; /* White background for the icon */
      border: 2px solid #007bff; /* Blue border */
      border-radius: 50%; /* Circular shape */
      width: 60px; /* Width of the icon */
      height: 60px; /* Height of the icon */
      display: flex; /* Flexbox for centering content */
      align-items: center; /* Center vertically */
      justify-content: center; /* Center horizontally */
      box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2); /* Subtle shadow for depth */
      cursor: pointer; /* Pointer cursor on hover */
      transition: background-color 0.3s, transform 0.3s; /* Smooth transitions for hover effects */
    }

    .cart-icon:hover {
      background-color: #e9ecef; /* Light gray background on hover */
      transform: scale(1.05); /* Slightly enlarge on hover */
    }

    /* Notification badge styles */
    .badge {
      position: absolute; /* Position relative to the cart icon */
      top: -5px; /* Adjust position above the icon */
      right: -10px; /* Adjust position to the right of the icon */
      background: red; /* Red background for the badge */
      color: #fff; /* White text color */
      font-size: 0.8rem; /* Font size for badge text */
      border-radius: 50%; /* Circular shape for badge */
      width: 20px; /* Fixed width for badge */
      height: 20px; /* Fixed height for badge */
      display: flex; /* Flexbox for centering content in badge */
      align-items: center; /* Center vertically in badge */
      justify-content: center; /* Center horizontally in badge */
      font-weight: bold; /* Bold text for visibility */
    }

    .card {
      transition: transform 0.3s, box-shadow 0.3s;
    }

    .card:hover {
      transform: translateY(-5px); /* Lift effect on hover */
      box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.2); /* Deeper shadow on hover */
    }

    .added-to-cart {
      position: absolute;
      top: 10px;
      left: 10px;
      background-color: rgba(0, 128, 0, 0.8); /* Semi-transparent green background */
      color: white;
      padding: 5px;
      border-radius: 5px;
      font-size: 0.75rem;
      display: none; /* Hide by default */
    }

    .add-to-cart-icon,
    .remove-from-cart-icon {
      font-size: 1rem; /* Reduced font size for buttons */
    }

    .btn {
        font-size: smaller;
        padding-top:.25rem;
        padding-bottom:.25rem;
        padding-left:.5rem;
        padding-right:.5rem;
     }

    .search-form {
      margin-bottom: 20px; /* Space between search form and products */
    }

    .search-form input {
      margin-right: 10px; /* Space between input fields */
      padding: 0.5rem;
    }

    .search-form button {
      padding: 0.5rem 1rem;
    }
  </style>
</head>
<body>
<div class="container">
    <h1 class="my-4">Products</h1>
    
    <!-- Search Form -->
	<form action="/order/" method="get" class="search-form">
	  <input type="text" name="title" placeholder="Search by title" value="<%= searchQuery.title || '' %>" />
	  <input type="text" name="description" placeholder="Search by description" value="<%= searchQuery.description || '' %>" />
	  <input type="text" name="category" placeholder="Search by category" value="<%= searchQuery.category || '' %>" />
	  
	  <!-- Price Range Inputs -->
	  <input type="number" name="price[min]" placeholder="Min price" value="<%= searchQuery.price?.min || '' %>" />
	  <input type="number" name="price[max]" placeholder="Max price" value="<%= searchQuery.price?.max || '' %>" />
	  
	  <button type="submit">Search</button>
	</form>

    <!-- Product Listings -->
    <div class="row">
        <% products.forEach((product) => { %>
        <div class="col-md-4">
            <div class="card mb-4 shadow-sm position-relative">
                <!-- Wrap the card image and title with a clickable link to the product details page -->
                <a href="/order/product/<%= product._id %>">
                    <% const baseUrl = process.env.API_ORDERS_IMAGE_URL || 'http://localhost:6000'; %> 
                    <% if (product.image) { %>
                    <% if (product.image.startsWith('/uploads/')) { %>
                    <!-- Render local upload image with the full URL from environment variable -->
                    <img src="<%= baseUrl %>/images<%= product.image %>" class="card-img-top" alt="<%= product.title %>" style="max-height: 200px; object-fit: cover;" />
                    <% } else { %>
                    <!-- Render external image directly -->
                    <img src="<%= product.image %>" class="card-img-top" alt="<%= product.title %>" style="max-height: 200px; object-fit: cover;" />
                    <% } %>
                    <% } else { %>
                    <!-- Render placeholder image if no image is provided -->
                    <img src="/images/placeholder.png" class="card-img-top" alt="No Image Available" style="max-height: 200px; object-fit: cover;" />
                    <% } %>
                </a>
                <div class="card-body">
                    <!-- Product title wrapped in a clickable link -->
                    <a href="/order/product/<%= product._id %>" class="card-title">
                        <h5><%= product.title %></h5>
                    </a>
                    <p class="card-text">$<%= product.price %></p>
                    <!-- The form for adding to cart -->
                    <form action="/order/cart" method="post" class="add-to-cart-form">
                        <input type="hidden" name="productId" value="<%= product._id %>">
                        <input type="hidden" name="title" value="<%= product.title %>">
                        <input type="hidden" name="price" value="<%= product.price %>">
                        <div class="form-group">
                            <label>Quantity:</label>
                            <input type="number" name="quantity" value="1" class="form-control" min="1">
                        </div>
                        <button type="submit" class="add-to-cart-icon btn btn-primary btn-block mt-3">
                            <i class="fas fa-cart-plus"></i> Add to Cart
                        </button>
                    </form>
                    <!-- Remove from Cart Button -->
                    <form action="/order/cart/remove" method="post" class="remove-from-cart-form">
                        <input type="hidden" name="productId" value="<%= product._id %>">
                        <button type="submit" class="remove-from-cart-icon btn btn-danger btn-block mt-2">
                            <i class="fas fa-trash-alt"></i> Remove from Cart
                        </button>
                    </form>
                </div>

                <!-- Indicator showing item has been added to cart -->
                <div class="added-to-cart">Added!</div>

            </div>
        </div>
        <% }); %>
    </div>

    <!-- Cart Icon with Notification Badge -->
    <div id="cartIconContainer">
        <a href="/order/cart" class="cart-icon">
            <i class="fas fa-shopping-cart"></i>
            <span id="cartCount" class="badge"><%= cartCount %></span> <!-- Notification Badge -->
        </a>
    </div>

</div>

<%- include("../../partials/footer"); %>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script> <!-- Include jQuery -->

<script>
// Initialize cart count from backend
let cartCount = parseInt(document.getElementById('cartCount').innerText) || 0;

// Add event listener to each add-to-cart form submission
$('.add-to-cart-form').on('submit', function(event) {
  event.preventDefault(); // Prevent default form submission

  const form = $(this); // Get form element

  $.post(form.attr('action'), form.serialize(), function(data) {
    // Assuming backend returns updated cart count
    cartCount++;
    document.getElementById('cartCount').innerText = cartCount;
    alert('Product added to cart!'); // Optional feedback

    // Show indicator that item has been added
    form.closest('.card').find('.added-to-cart').show(); // Show added indicator

    // Add animation to cart icon
    const cartIcon = document.querySelector('.cart-icon');
    cartIcon.classList.add('animate');
    setTimeout(() => {
      cartIcon.classList.remove('animate');
    }, 500);
  });
});

// Add event listener to each remove-from-cart form submission
$('.remove-from-cart-form').on('submit', function(event) {
  event.preventDefault(); // Prevent default form submission

  const form = $(this); // Get form element

  $.post(form.attr('action'), form.serialize(), function(data) {
    // Assuming backend returns updated cart count
    if (cartCount > 0) {
      cartCount--;
      document.getElementById('cartCount').innerText = cartCount;
      alert('Product removed from cart!'); // Optional feedback
    }

    // Hide added indicator when item is removed
    form.closest('.card').find('.added-to-cart').hide(); // Hide added indicator
  });
});
</script>

</body>
</html>
